let Eq : fun (A : Type) -> A -> A -> Type :=
  fun A x y => fun (P : A -> Type) -> P x -> P y;

let refl : fun (A : Type) (x : A) -> Eq A x x :=
  fun A x P px => px;


--------------------------------------------------------------------------------
-- Eta rules for the unit record
--------------------------------------------------------------------------------

let eta : Eq ({} -> {} -> {}) (fun x y => x) (fun x y => x) :=
  refl ({} -> {} -> {}) (fun _ _ => {});

let eta (x : {}) (y : {}) : Eq {} x y :=
  refl {} {};

let eta (x : {} -> {}) (y : {} -> {}) : Eq ({} -> {}) x y :=
  refl ({} -> {}) (fun _ => {});

let eta (A : Type) (x : A -> {}) (y : A -> {}) : Eq (A -> {}) x y :=
  refl (A -> {}) (fun _ => {});


--------------------------------------------------------------------------------
-- Eta rules for records
--------------------------------------------------------------------------------

let eta (A : Type) (B : Type) (r : { x : A; y : B }) : Eq { x : A; y : B } r { x := r.x; y := r.y } :=
  refl { x : A; y : B } r;

let eta (A : Type) (B : Type) (r : { x : A; y : B }) : Eq { x : A; y : B } { x := r.x; y := r.y } r :=
  refl { x : A; y : B } r;


--------------------------------------------------------------------------------


Type
