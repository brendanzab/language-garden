let Functor := {
  T : Type -> Type;
  map : fun (A : Type) (B : Type) -> (A -> B) -> T A -> T B;
};

let Applicative := {
  T : Type -> Type;
  functor : Functor [ T := T ];
  pure : fun (A : Type) -> A -> T A;
  apply : fun (A : Type) (B : Type) -> T (A -> B) -> T A -> T B;
};

let Monad := {
  T : Type -> Type;
  applicative : Applicative [ T := T ];
  flat-map : fun (A : Type) (B : Type) -> (A -> T B) -> T A -> T B;
};


let Option (A : Type) : Type :=
  fun (Out : Type) -> { some : A -> Out; none : Out } -> Out;

let none (A : Type) : Option A :=
  fun Out cases => cases.none;
let some (A : Type) (a : A) : Option A :=
  fun Out cases => cases.some a;

let option-functor : Functor := {
  T := Option;
  map := fun A B f opt-A =>
    opt-A (Option B) {
      some := fun x => some B (f x);
      none := none B;
    };
};

let option-applicative : Applicative := {
  T := Option;
  functor := option-functor;
  pure := some;
  apply := fun A B opt-f opt-A =>
    opt-f (Option B) {
      some := fun f => option-functor.map A B f opt-A;
      none := none B;
    };
};

let option-monad : Monad := {
  T := Option;
  applicative := option-applicative;
  flat-map := fun A B f opt-A =>
    opt-A (Option B) {
      some := f;
      none := none B;
    };
};


Type
