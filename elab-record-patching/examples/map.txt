-- Example from page 4 of “1ML – Core and Modules United”

let Bool := fun (Out : Type) -> { true : Out; false : Out } -> Out;
let true : Bool := fun Out cases => cases.true;
let false : Bool := fun Out cases => cases.false;

let Option (A : Type) : Type :=
  fun (Out : Type) -> { some : A -> Out; none : Out } -> Out;

let none (A : Type) : Option A :=
  fun Out cases => cases.none;
let some (A : Type) (a : A) : Option A :=
  fun Out cases => cases.some a;

let Eq := {
  T : Type;
  eq : T -> T -> Bool;
};

let Map := {
  Key : Type;
  Map : Type -> Type;
  empty : fun (A : Type) -> Map A;
  add : fun (A : Type) -> Key -> A -> Map A -> Map A;
  lookup : fun (A : Type) -> Key -> Map A -> Option A;
};

-- TODO: sealing operator
let eq-map (key : Eq) : Map [ Key := key.T ] := {
  Map A := key.T -> Option A;
  empty A x := none A;
  add A k v map :=
    fun x => (key.eq x k) (Option A) {
      true := some A v;
      false := map x;
    };
  lookup A k map := map k;
};

Type
