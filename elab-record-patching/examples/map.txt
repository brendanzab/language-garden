-- Example from page 4 of “1ML – Core and Modules United”

let Bool := fun (Out : Type) -> { true : Out; false : Out } -> Out;
let true : Bool := fun Out cases => cases.true;
let false : Bool := fun Out cases => cases.false;

let Option (A : Type) : Type :=
  fun (Out : Type) -> { some : A -> Out; none : Out } -> Out;

let none (A : Type) : Option A :=
  fun Out cases => cases.none;
let some (A : Type) (a : A) : Option A :=
  fun Out cases => cases.some a;

let Eq := {
  T : Type;
  eq : T -> T -> Bool;
};

let eq-bool : Eq [ T := Bool ] := {
  eq x y :=
    x Bool {
      true := y Bool { true := true; false := false };
      false := y Bool { true := false; false := true };
    };
};

let eq-option (eq-a : Eq) : Eq [ T := Option eq-a.T ] := {
  eq x y :=
    x Bool {
      some x := y Bool { some y := eq-a.eq x y; none := false };
      none := y Bool { some _ := false; none := true };
    };
};

let Map := {
  Key : Type;
  Map : Type -> Type;
  empty : fun (A : Type) -> Map A;
  add : fun (A : Type) -> Key -> A -> Map A -> Map A;
  lookup : fun (A : Type) -> Key -> Map A -> Option A;
};

-- TODO: sealing operator
let eq-map (key : Eq) : Map [ Key := key.T ] := {
  Map A := key.T -> Option A;
  empty A x := none A;
  add A k v map :=
    fun x => (key.eq x k) (Option A) {
      true := some A v;
      false := map x;
    };
  lookup A k map := map k;
};

-- Polymorphic map operations, inspired by Section 4.4 of “Modular Implicits”
-- https://arxiv.org/abs/1512.01895

let empty (key : Eq) (A : Type) : (eq-map key).Map A := (eq-map key).empty A;
let add (key : Eq) (A : Type) : key.T -> A -> (eq-map key).Map A -> (eq-map key).Map A := (eq-map key).add A;
let lookup (key : Eq) (A : Type) : key.T -> (eq-map key).Map A -> Option A := (eq-map key).lookup A;

Type
