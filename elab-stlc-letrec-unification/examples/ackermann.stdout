let succ : Int -> Int := fun (n : Int) => #int-add n 1;
let pred : Int -> Int := fun (n : Int) => #int-sub n 1;
let ack : Int -> Int -> Int :=
  #fix (ack : Int -> Int -> Int) =>
    fun (m : Int) => fun (n : Int) =>
      if #int-eq m 0 then
        succ 1
      else
        if #int-eq n 0 then ack (pred m) 1 else ack (pred m) (ack m (pred n));
ack 3 4 : Int
